#!/usr/bin/env python3
"""
Demo Script: Enhanced Features Showcase
Tests emotion analysis and archetype systems without Telegram integration
"""

import asyncio
import logging
import os
from datetime import datetime
from dotenv import load_dotenv

# Import enhanced modules
from text_processor import TextProcessor
from emotion_analyzer import EmotionAnalyzer, EmotionScores
from archetype_system import ArchetypeSystem, create_archetype_system

# Load environment
load_dotenv('.env.test')

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - DEMO - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class EnhancedFeaturesDemo:
    """Demo class for testing enhanced features"""
    
    def __init__(self):
        self.openai_api_key = os.getenv('OPENAI_API_KEY')
        self.text_processor = None
        self.emotion_analyzer = None
        self.archetype_system = None
    
    async def initialize(self):
        """Initialize all systems"""
        if not self.openai_api_key:
            raise ValueError("OPENAI_API_KEY required for demo")
        
        print("üîß Initializing enhanced systems...")
        
        # Initialize text processor
        self.text_processor = TextProcessor(self.openai_api_key)
        print("‚úÖ Text processor initialized")
        
        # Initialize emotion analyzer
        self.emotion_analyzer = EmotionAnalyzer(self.text_processor.client)
        print("‚úÖ Emotion analyzer initialized")
        
        # Initialize archetype system
        self.archetype_system = create_archetype_system(self.text_processor.client)
        print("‚úÖ Archetype system initialized")
        
        print("üöÄ All systems ready!\n")
    
    async def demo_text_processing(self, text: str):
        """Demo enhanced text processing"""
        print(f"üìù –î–ï–ú–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞")
        print(f"–í—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç: \"{text}\"")
        print("-" * 60)
        
        # Process with enhanced pipeline
        try:
            if not self.text_processor:
                raise ValueError("Text processor not initialized")
            result = await self.text_processor.process_parallel(text)
            formatted = self.text_processor.format_output(result)
            
            print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ë–†–ê–ë–û–¢–ö–ò:")
            print(formatted)
            print("-" * 60)
            
            return result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            return None
    
    async def demo_archetype_selection(self, text: str, emotion_scores: EmotionScores):
        """Demo archetype auto-selection"""
        print(f"\nüé≠ –î–ï–ú–û: –ê–≤—Ç–æ–≤—ã–±–æ—Ä –∞—Ä—Ö–µ—Ç–∏–ø–∞")
        
        # Get auto-suggestion
        if not self.archetype_system:
            raise ValueError("Archetype system not initialized")
        suggested_archetype, reason = await self.archetype_system.get_auto_suggestion(emotion_scores)
        
        print(f"üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∞—Ä—Ö–µ—Ç–∏–ø: {suggested_archetype}")
        print(f"üìã –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        print("-" * 60)
        
        return suggested_archetype
    
    async def demo_archetype_response(self, archetype: str, text: str, emotion_scores: EmotionScores):
        """Demo archetype response generation"""
        print(f"\nü§ñ –î–ï–ú–û: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –∞—Ä—Ö–µ—Ç–∏–ø–∞ {archetype}")
        
        try:
            if not self.archetype_system:
                raise ValueError("Archetype system not initialized")
            response = await self.archetype_system.generate_archetype_response(
                archetype, text, emotion_scores
            )
            
            if response.error_message:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.error_message}")
                return
            
            print(f"üé≠ {archetype} —Å–æ–≤–µ—Ç—É–µ—Ç:")
            for i, advice in enumerate(response.responses, 1):
                print(f"  {i}. {advice}")
            
            if response.signature:
                print(f"\n{response.signature}")
            
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.processing_time:.2f}s")
            print("-" * 60)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—Ä—Ö–µ—Ç–∏–ø–∞: {e}")
    
    async def demo_all_archetypes(self, text: str, emotion_scores: EmotionScores):
        """Demo all archetype responses"""
        print(f"\nüé™ –î–ï–ú–û: –í—Å–µ –∞—Ä—Ö–µ—Ç–∏–ø—ã –æ—Ç–≤–µ—á–∞—é—Ç")
        
        archetypes = ['EMPATH', 'META-SAGE', 'TRICKSTER', 'CRAZY-WISDOM']
        
        for archetype in archetypes:
            print(f"\n--- {archetype} ---")
            await self.demo_archetype_response(archetype, text, emotion_scores)
    
    async def run_demo(self):
        """Run complete demo"""
        print("üé™ –î–ï–ú–û: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Telegram –±–æ—Ç–∞")
        print("=" * 60)
        
        await self.initialize()
        
        # Test cases
        test_cases = [
            "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? –ñ–¥—É —Ç–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞.",
            "–û–ø—è—Ç—å —ç—Ç–∏ –∏–¥–∏–æ—Ç—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω–∏–º–∞—é—Ç, –¥–æ—Å—Ç–∞–ª–∏ —É–∂–µ —Å–æ —Å–≤–æ–∏–º–∏ –≥–ª—É–ø—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏!",
            "–ö–æ–Ω–µ—á–Ω–æ, —Ç–≤–æ—è –∏–¥–µ—è –ø—Ä–æ—Å—Ç–æ –≥–µ–Ω–∏–∞–ª—å–Ω–∞... –æ—Å–æ–±–µ–Ω–Ω–æ —Ç–∞ —á–∞—Å—Ç—å –≥–¥–µ –≤—Å–µ –¥–æ–ª–∂–Ω—ã –¥–µ–ª–∞—Ç—å –∑–∞ —Ç–µ–±—è.",
            "–¢—ã –¥–æ–ª–∂–µ–Ω —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –º–æ–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º, –∏–Ω–∞—á–µ –≤—Å–µ –±—É–¥—É—Ç –¥—É–º–∞—Ç—å —á—Ç–æ —Ç—ã –Ω–µ –∫–æ–º–∞–Ω–¥–Ω—ã–π –∏–≥—Ä–æ–∫.",
            "–ú–µ–¥–∏—Ç–∞—Ü–∏—è –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ–∫–æ–π –∏ –≥–∞—Ä–º–æ–Ω–∏—é —Å –æ–∫—Ä—É–∂–∞—é—â–∏–º –º–∏—Ä–æ–º."
        ]
        
        for i, test_text in enumerate(test_cases, 1):
            print(f"\nüß™ –¢–ï–°–¢ –ö–ï–ô–° {i}")
            print("=" * 60)
            
            # 1. Enhanced text processing
            result = await self.demo_text_processing(test_text)
            if not result or not result.emotion_scores:
                continue
            
            # Create EmotionScores object
            emotion_scores = EmotionScores(
                sarcasm=result.emotion_scores.get('sarcasm', 0.0),
                toxicity=result.emotion_scores.get('toxicity', 0.0),
                manipulation=result.emotion_scores.get('manipulation', 0.0)
            )
            
            # 2. Archetype auto-selection
            suggested = await self.demo_archetype_selection(test_text, emotion_scores)
            
            # 3. Generate suggested archetype response
            await self.demo_archetype_response(suggested, test_text, emotion_scores)
            
            print("\n" + "=" * 60)
        
        print("\nüéâ –î–ï–ú–û –ó–ê–í–ï–†–®–ï–ù–û!")
        print("\n–í—Å–µ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã:")
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π (—Å–∞—Ä–∫–∞–∑–º, —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å, –º–∞–Ω–∏–ø—É–ª—è—Ü–∏—è)")
        print("‚úÖ –ê–≤—Ç–æ–≤—ã–±–æ—Ä –∞—Ä—Ö–µ—Ç–∏–ø–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–æ—Ü–∏–π")
        print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–≤–µ—Ç–æ–≤ –≤ 4 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç–∏–ª—è—Ö")
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–µ–∫—Å—Ç–∞")


async def main():
    """Main demo function"""
    try:
        demo = EnhancedFeaturesDemo()
        await demo.run_demo()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    print("üé≠ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π...")
    print("üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ: –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω –±–æ—Ç–∞")
    print()
    asyncio.run(main()) 