#!/usr/bin/env python3
"""
Test script to verify fallback button functionality without Redis
"""

import sys
import os
import asyncio
from datetime import datetime
from pathlib import Path

# Add project directory to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


def test_fallback_button_creation():
    """Test creating fallback buttons"""
    print("üß™ Testing fallback button creation...")
    
    # Test voice message buttons
    voice_buttons = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="ü§ñ —Å–æ–≤–µ—Ç", callback_data="advice_simple"),
            InlineKeyboardButton(text="üìÑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç", callback_data="transcript_simple")
        ]
    ])
    
    # Test text message buttons  
    text_buttons = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="ü§ñ —Å–æ–≤–µ—Ç", callback_data="advice_simple"),
        ]
    ])
    
    print("‚úÖ Voice message buttons created:")
    print(f"  - Button count: {len(voice_buttons.inline_keyboard[0])}")
    print(f"  - Button 1: {voice_buttons.inline_keyboard[0][0].text}")
    print(f"  - Button 2: {voice_buttons.inline_keyboard[0][1].text}")
    
    print("‚úÖ Text message buttons created:")
    print(f"  - Button count: {len(text_buttons.inline_keyboard[0])}")
    print(f"  - Button: {text_buttons.inline_keyboard[0][0].text}")
    
    return voice_buttons, text_buttons


def test_transcript_extraction():
    """Test transcript extraction from formatted message"""
    print("\nüß™ Testing transcript extraction...")
    
    # Simulate formatted message content
    test_message = """
üìù **–†–µ–∑—é–º–µ**: –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏

**–û—Å–Ω–æ–≤–Ω—ã–µ –ø—É–Ω–∫—Ç—ã**:
‚Ä¢ –ü–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ –í—Ç–æ—Ä–æ–π –ø—É–Ω–∫—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
‚Ä¢ –¢—Ä–µ—Ç–∏–π –ø—É–Ω–∫—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

üëâ **–î–µ–π—Å—Ç–≤–∏—è**: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã

**–¢–µ–∫—Å—Ç:**
–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞

üé≠ **–¢–æ–Ω**: –Ω–∞–º–µ—Ä–µ–Ω–∏—è: –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ, —ç–º–æ—Ü–∏—è: –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è, —Å—Ç–∏–ª—å: –¥–µ–ª–æ–≤–æ–π

‚è±Ô∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ 2.5—Å
"""
    
    # Extract transcript (simulating the logic from main.py)
    transcript_text = ""
    lines = test_message.split('\n')
    
    in_transcript_section = False
    for line in lines:
        line = line.strip()
        if '–¢–µ–∫—Å—Ç:' in line or '–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç:' in line:
            in_transcript_section = True
            continue
        elif in_transcript_section:
            if line.startswith('**') or line.startswith('üìù') or line.startswith('‚è±Ô∏è') or line.startswith('üé≠'):
                break
            if line and not line.startswith('*'):
                transcript_text += line + " "
    
    expected_transcript = "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"
    extracted_transcript = transcript_text.strip()
    
    print(f"‚úÖ Transcript extraction test:")
    print(f"  - Expected: {expected_transcript}")
    print(f"  - Extracted: {extracted_transcript}")
    print(f"  - Match: {'‚úÖ Yes' if expected_transcript in extracted_transcript else '‚ùå No'}")
    
    return extracted_transcript


def test_advice_generation():
    """Test advice generation without OpenAI"""
    print("\nüß™ Testing advice generation...")
    
    # Test advice responses (from main.py)
    advice_responses = [
        "üí° **–°–æ–≤–µ—Ç –º—É–¥—Ä–µ—Ü–∞**: –ù–∞–π–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–¥—É–º–∞—Ç—å –Ω–∞–¥ –∫–ª—é—á–µ–≤—ã–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è. –ß—Ç–æ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ?",
        "üé≠ **–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥**: –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—é —Å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã. –ö–∞–∫–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –≤—ã –≤–∏–¥–∏—Ç–µ?", 
        "‚ù§Ô∏è **–≠–º–ø–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–∑–≥–ª—è–¥**: –£—á—Ç–∏—Ç–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–æ—Å—Ç–∞–≤–ª—è—é—â—É—é. –ß—Ç–æ —á—É–≤—Å—Ç–≤—É—é—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–∏—Ç—É–∞—Ü–∏–∏?",
        "üÉè **–ò–≥—Ä–æ–≤–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞**: –ò–Ω–æ–≥–¥–∞ –ª—É—á—à–∏–π —Å–æ–≤–µ—Ç - –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤—Å—ë —Å–ª–∏—à–∫–æ–º —Å–µ—Ä—å–µ–∑–Ω–æ. –ú–æ–∂–Ω–æ –ª–∏ –Ω–∞–π—Ç–∏ –∑–¥–µ—Å—å —á—Ç–æ-—Ç–æ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ?"
    ]
    
    # Test selection logic
    test_user_id = 12345
    response_index = hash(str(test_user_id)) % len(advice_responses)
    selected_advice = advice_responses[response_index]
    
    print(f"‚úÖ Advice generation test:")
    print(f"  - Available responses: {len(advice_responses)}")
    print(f"  - Test user ID: {test_user_id}")
    print(f"  - Selected index: {response_index}")
    print(f"  - Selected advice: {selected_advice}")
    
    return selected_advice


def test_file_creation():
    """Test transcript file creation"""
    print("\nüß™ Testing transcript file creation...")
    
    try:
        # Test creating temp directory and file
        temp_dir = Path("temp")
        temp_dir.mkdir(exist_ok=True)
        
        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        user_id = "test_user"
        test_transcript = "–¢–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞"
        
        transcript_content = f"""–¢–†–ê–ù–°–ö–†–ò–ü–¢ –ì–û–õ–û–°–û–í–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø
–î–∞—Ç–∞: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}

–¢–ï–ö–°–¢:
{test_transcript}

---
–°–æ–∑–¥–∞–Ω–æ –±–æ—Ç–æ–º Voice-to-Insight Pipeline
"""
        
        transcript_file = temp_dir / f"transcript_{user_id}_{timestamp}.txt"
        transcript_file.write_text(transcript_content, encoding='utf-8')
        
        # Verify file was created
        file_exists = transcript_file.exists()
        file_size = transcript_file.stat().st_size if file_exists else 0
        
        print(f"‚úÖ File creation test:")
        print(f"  - File created: {'‚úÖ Yes' if file_exists else '‚ùå No'}")
        print(f"  - File size: {file_size} bytes")
        print(f"  - File path: {transcript_file}")
        
        # Clean up
        if file_exists:
            transcript_file.unlink()
            print(f"  - File cleaned up: ‚úÖ")
        
        return file_exists
        
    except Exception as e:
        print(f"‚ùå File creation test failed: {e}")
        return False


def main():
    """Run all fallback functionality tests"""
    print("üîç Testing fallback button functionality without Redis...\n")
    
    success_count = 0
    total_tests = 4
    
    try:
        # Test button creation
        voice_buttons, text_buttons = test_fallback_button_creation()
        if voice_buttons and text_buttons:
            success_count += 1
            
        # Test transcript extraction
        extracted_transcript = test_transcript_extraction()
        if extracted_transcript:
            success_count += 1
            
        # Test advice generation
        selected_advice = test_advice_generation()
        if selected_advice:
            success_count += 1
            
        # Test file creation
        file_created = test_file_creation()
        if file_created:
            success_count += 1
            
        # Summary
        print(f"\nüìä Test Results:")
        print(f"‚úÖ Passed: {success_count}/{total_tests}")
        print(f"‚ùå Failed: {total_tests - success_count}/{total_tests}")
        
        if success_count == total_tests:
            print("\nüéâ All fallback functionality tests PASSED!")
            print("üöÄ The fallback buttons should work in production without Redis")
        else:
            print(f"\n‚ö†Ô∏è Some tests failed. Fallback functionality may have issues.")
            
    except Exception as e:
        print(f"\nüí• Test suite failed: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()