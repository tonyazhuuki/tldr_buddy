#!/usr/bin/env python3
"""
Telegram Voice-to-Insight Pipeline
Main bot application with aiogram 3
"""

import asyncio
import logging
import os
import sys
from datetime import datetime
from pathlib import Path
from typing import Optional

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, ErrorEvent, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from dotenv import load_dotenv

# Import speech processing modules
from speech_pipeline import SpeechPipelineFactory, SpeechPipelineError

# Import text processing
from text_processor import TextProcessor

# Import enhanced systems for Phase 3
# Fully re-enabled for complete functionality
import redis.asyncio as redis
from button_ui_manager import ButtonUIManager, create_button_ui_manager
from archetype_system import ArchetypeSystem, create_archetype_system

# Import SummaryEngine for two-mode summarization
from summary_engine import SummaryEngine, ContentType, create_summary_engine

# Import process management for single-instance enforcement
from process_manager import enforce_single_instance

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/bot.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# Bot configuration
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
if not TELEGRAM_TOKEN:
    logger.error("TELEGRAM_TOKEN environment variable not set")
    sys.exit(1)

# Initialize bot and dispatcher
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# Global pipeline instances
speech_pipeline = None
text_processor = None

# Global enhanced system instances  
redis_client = None
archetype_system = None
button_ui_manager = None
summary_engine = None

# Simple in-memory storage for last messages by chat (no Redis needed)
chat_last_messages = {}  # {chat_id: {"text": str, "timestamp": float, "type": "voice|text", "user_id": str}}

# Helper function for SummaryEngine integration
async def process_with_summary_engine(text: str, content_type: ContentType, duration: Optional[int] = None) -> Optional[str]:
    """
    Process text with SummaryEngine if available, otherwise return None
    
    Args:
        text: Text to process
        content_type: Type of content
        duration: Duration in seconds (for heuristics)
        
    Returns:
        Formatted summary if SummaryEngine is available and successful, None otherwise
    """
    if not summary_engine or not summary_engine.enabled:
        return None
    
    try:
        result = await summary_engine.process_summary(
            text=text,
            content_type=content_type,
            duration=duration
        )
        
        if result.success:
            return result.summary
        else:
            logger.warning(f"SummaryEngine failed: {result.error_message}")
            return None
            
    except Exception as e:
        logger.error(f"SummaryEngine processing error: {e}")
        return None


def create_transcript_buttons() -> InlineKeyboardMarkup:
    """Create inline keyboard with transcript buttons"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìù –ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç", callback_data="show_transcript"),
            InlineKeyboardButton(text="üìÑ –°–∫–∞—á–∞—Ç—å .txt", callback_data="download_txt")
        ]
    ])
    logger.info("Created transcript buttons with callback_data: show_transcript, download_txt")
    return keyboard


async def send_transcript_text(message: Message, text: str, chat_id: str, user_id: str = None):
    """Send transcript as text or file based on length"""
    logger.info(f"send_transcript_text: text_length={len(text)}, chat_id={chat_id}, user_id={user_id}")
    
    if len(text) <= 4096:
        # Send as text message
        transcript_text = f"""üìù **–¢–†–ê–ù–°–ö–†–ò–ü–¢**

{text}

---
üí° *–î–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è - –≤—ã–¥–µ–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤—ã—à–µ*"""
        await message.answer(transcript_text, parse_mode="Markdown")
    else:
        # Send as file
        from io import BytesIO
        import time
        
        timestamp = time.strftime("%Y%m%d_%H%M%S")
        filename = f"transcript_{user_id}_{timestamp}.txt"
        
        file_content = f"""–¢–†–ê–ù–°–ö–†–ò–ü–¢ –°–û–û–ë–©–ï–ù–ò–Ø
–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}

{text}

---
–°–æ–∑–¥–∞–Ω–æ –±–æ—Ç–æ–º TLDR Buddy"""
        
        file_obj = BytesIO(file_content.encode('utf-8'))
        file_obj.name = filename
        
        await message.answer_document(
            document=file_obj,
            caption="üìÑ **–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ —Ñ–∞–π–ª**\n\n–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è."
        )


async def get_last_message_data(chat_id: str, user_id: str = None, reply_to_message_id: int = None) -> dict:
    """
    Get last message data for chat, with support for reply-to-message
    
    Args:
        chat_id: Chat ID
        user_id: User ID (optional, for filtering)
        reply_to_message_id: Message ID to reply to (optional)
    
    Returns:
        Message data dict or None
    """
    logger.info(f"get_last_message_data: chat_id={chat_id}, user_id={user_id}")
    logger.info(f"Available chats: {list(chat_last_messages.keys())}")
    
    if chat_id not in chat_last_messages:
        logger.info(f"Chat {chat_id} not found in chat_last_messages, total chats: {len(chat_last_messages)}")
        return None
    
    last_msg_data = chat_last_messages[chat_id]
    
    # Check if message is not too old (1 hour limit)
    import time
    if time.time() - last_msg_data["timestamp"] > 3600:
        logger.info(f"Message for chat {chat_id} is too old ({(time.time() - last_msg_data['timestamp'])/60:.1f} minutes)")
        return None
    
    # If user_id is specified, check if it matches
    if user_id and last_msg_data.get("user_id") != user_id:
        logger.info(f"Message in chat {chat_id} belongs to user {last_msg_data.get('user_id')}, not {user_id}")
        return None
    
    logger.info(f"Found message for chat {chat_id}, type: {last_msg_data['type']}, age: {(time.time() - last_msg_data['timestamp'])/60:.1f} minutes")
    return last_msg_data


@dp.message(Command("start"))
async def cmd_start(message: Message):
    """Handle /start command"""
    welcome_text = """
üéôÔ∏è **Telegram Voice-to-Insight Pipeline**

–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò.

**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ üé§ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç (faster-whisper)
‚Ä¢ üß† –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é LLM
‚Ä¢ üé≠ –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞ –∏ —ç–º–æ—Ü–∏–π
‚Ä¢ üåç –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–æ–≤
‚Ä¢ ‚ö° –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (‚â§2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –º–∏–Ω—É—Ç–Ω–æ–≥–æ –∞—É–¥–∏–æ)

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
/health - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏

**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**
–ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!
"""
    await message.answer(welcome_text, parse_mode="Markdown")


@dp.message(Command("help"))
async def cmd_help(message: Message):
    """Handle /help command"""
    help_text = """ü§ñ **TLDR Buddy - –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞–Ω–∞–ª–∏–∑—É —Å–æ–æ–±—â–µ–Ω–∏–π**

**üìã –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´:**
‚Ä¢ `/start` - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ `/help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é
‚Ä¢ `/health` - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ `/stats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

**üîç –ê–ù–ê–õ–ò–ó –°–û–û–ë–©–ï–ù–ò–ô:**
‚Ä¢ `/summary` - –ü–æ–ª—É—á–∏—Ç—å —Å–∞–º–º–∞—Ä–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ `/transcript` - –ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ `/advice` - –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç
‚Ä¢ `/–∞–Ω–∞–ª–∏–∑` - –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (–Ω–∞–º–µ—Ä–µ–Ω–∏—è, —ç–º–æ—Ü–∏–∏, —Å—Ç–∏–ª—å)
‚Ä¢ `/layers` - –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–∫—Ä—ã—Ç—ã—Ö —Å–º—ã—Å–ª–æ–≤ –∏ –º–æ—Ç–∏–≤–æ–≤

**üõ†Ô∏è –û–¢–õ–ê–î–ö–ê:**
‚Ä¢ `/debug` - –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
‚Ä¢ `/limits` - –õ–∏–º–∏—Ç—ã —Ñ–∞–π–ª–æ–≤

**üìù –ö–ê–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–∏–¥–µ–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç
2. –ü–æ–ª—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ (—Ä–µ–∑—é–º–µ + –¥–µ–π—Å—Ç–≤–∏—è)
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞

**üí° –ü–û–î–°–ö–ê–ó–ö–ê:** –û—Å–Ω–æ–≤–Ω–æ–π –≤—ã–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã. –î–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã!

**üéØ –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–ú–´–ï –§–û–†–ú–ê–¢–´:**
‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram ‚ö° –±—ã—Å—Ç—Ä–æ
‚Ä¢ –í–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞—É–¥–∏–æ
‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã MP3, MP4, WAV

–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50 –ú–ë | –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 10 –º–∏–Ω—É—Ç"""
    await message.answer(help_text, parse_mode="Markdown")


@dp.message(Command("health"))
async def cmd_health(message: Message):
    """Handle /health command"""
    try:
        if not speech_pipeline:
            await message.answer("‚ùå –°–∏—Å—Ç–µ–º–∞ —Ä–µ—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return
        
        health_status = await speech_pipeline.health_check()
        
        if health_status['status'] == 'healthy':
            status_text = "‚úÖ **–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ**\n\n"
        else:
            status_text = "‚ö†Ô∏è **–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã**\n\n"
        
        for component, info in health_status['components'].items():
            status_icon = "‚úÖ" if info['status'] == 'healthy' else "‚ùå"
            status_text += f"{status_icon} **{component}**: {info['message']}\n"
        
        await message.answer(status_text, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã")


@dp.message(Command("stats"))
async def cmd_stats(message: Message):
    """Handle /stats command"""
    try:
        if not speech_pipeline:
            await message.answer("‚ùå –°–∏—Å—Ç–µ–º–∞ —Ä–µ—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return
        
        metrics = speech_pipeline.get_performance_metrics()
        
        stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏**

**–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {metrics['total_processed']}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {metrics['success_count']}
‚Ä¢ –û—à–∏–±–æ–∫: {metrics['error_count']}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {metrics['success_rate']:.1%}

**–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {metrics['average_total_time']:.2f}—Å
‚Ä¢ –í—Ä–µ–º—è –∞—É–¥–∏–æ–æ–±—Ä–∞–±–æ—Ç–∫–∏: {metrics['average_audio_time']:.2f}—Å  
‚Ä¢ –í—Ä–µ–º—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {metrics['average_speech_time']:.2f}—Å
‚Ä¢ –¶–µ–ª—å ‚â§2—Å: {"‚úÖ" if metrics['performance_target_met'] else "‚ùå"}
"""
        
        await message.answer(stats_text, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Stats command failed: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@dp.message(Command("summary"))
async def cmd_summary(message: Message):
    """Handle /summary command - return summary for last message"""
    try:
        if not message.from_user:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
            
        user_id = str(message.from_user.id)
        chat_id = str(message.chat.id)
        
        # Get last message data
        last_msg_data = await get_last_message_data(chat_id, user_id)
        if not last_msg_data:
            # Add debug information
            total_chats = len(chat_last_messages)
            chat_ids = list(chat_last_messages.keys())
            
            debug_info = f"""
üìÑ **–°–∞–º–º–∞—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ**

–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–∏–¥–µ–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, 
–∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/summary` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–º–º–∞—Ä–∏.

üí° **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–∏–¥–µ–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç
2. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏  
3. –í–≤–µ–¥–∏—Ç–µ `/summary` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–º–º–∞—Ä–∏

üîç **–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ –í–∞—à ID: {user_id}
‚Ä¢ ID —á–∞—Ç–∞: {chat_id}
‚Ä¢ –í—Å–µ–≥–æ —á–∞—Ç–æ–≤ –≤ –ø–∞–º—è—Ç–∏: {total_chats}
‚Ä¢ ID —á–∞—Ç–æ–≤: {chat_ids[:5] if chat_ids else '–Ω–µ—Ç'}
"""
            await message.answer(debug_info, parse_mode="Markdown")
            return
        
        # Get the text and try to process with SummaryEngine
        text = last_msg_data["text"]
        msg_type = last_msg_data["type"]
        
        # Try SummaryEngine first
        if summary_engine and summary_engine.enabled:
            content_type = ContentType.TELEGRAM_VOICE if msg_type == "voice" else ContentType.TELEGRAM_VIDEO_NOTE if msg_type == "video" else ContentType.TEXT_INPUT
            
            result = await summary_engine.process_summary(
                text=text,
                content_type=content_type
            )
            
            if result.success:
                await message.answer(
                    result.summary, 
                    parse_mode="Markdown",
                    reply_markup=create_transcript_buttons()
                )
                return
        
        # Fallback to text processor
        if text_processor:
            try:
                processing_result = await text_processor.process_parallel(text)
                
                # Create simplified output
                simplified_output = f"""üìù **–°–∞–º–º–∞—Ä–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è**

{processing_result.summary if hasattr(processing_result, 'summary') else '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω'}

üìç **–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:**
{processing_result.bullet_points if hasattr(processing_result, 'bullet_points') else '‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –≤—ã–¥–µ–ª–µ–Ω—ã'}

üëâ **–¢—Ä–µ–±—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**
{processing_result.actions if hasattr(processing_result, 'actions') and processing_result.actions else '‚Ä¢ –î–µ–π—Å—Ç–≤–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è'}"""
                
                await message.answer(
                    simplified_output, 
                    parse_mode="Markdown",
                    reply_markup=create_transcript_buttons()
                )
                return
                
            except Exception as e:
                logger.error(f"Text processing error in summary command: {e}")
        
        # Final fallback - just show the text
        await message.answer(
            f"üìù **–¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è**\n\n{text}",
            parse_mode="Markdown",
            reply_markup=create_transcript_buttons()
        )
        
    except Exception as e:
        logger.error(f"Summary command failed: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∞–º–º–∞—Ä–∏")


@dp.message(Command("transcript"))
async def cmd_transcript(message: Message):
    """Handle /transcript command - download last message as file"""
    try:
        if not message.from_user:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
            
        user_id = str(message.from_user.id)
        chat_id = str(message.chat.id)
        
        # Get last message data
        last_msg_data = await get_last_message_data(chat_id, user_id)
        if not last_msg_data:
            # Add debug information
            total_chats = len(chat_last_messages)
            chat_ids = list(chat_last_messages.keys())
            
            debug_info = f"""
üìÑ **–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω**

–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, 
–∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/transcript` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞.

üí° **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç
2. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏  
3. –í–≤–µ–¥–∏—Ç–µ `/transcript` –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è

üîç **–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ –í–∞—à ID: {user_id}
‚Ä¢ ID —á–∞—Ç–∞: {chat_id}
‚Ä¢ –í—Å–µ–≥–æ —á–∞—Ç–æ–≤ –≤ –ø–∞–º—è—Ç–∏: {total_chats}
‚Ä¢ ID —á–∞—Ç–æ–≤: {chat_ids[:5] if chat_ids else '–Ω–µ—Ç'}
"""
            await message.answer(debug_info, parse_mode="Markdown")
            return
        
        # Get message data
        transcript_text = last_msg_data["text"]
        msg_type = last_msg_data["type"]
        
        # Send transcript as .txt file
        await send_transcript_text(message, transcript_text.strip(), chat_id, user_id)
        
        logger.info(f"Transcript sent to user {user_id}, type: {msg_type}")
        
    except Exception as e:
        logger.error(f"Transcript command failed: {e}")
        import traceback
        logger.error(f"Transcript error traceback: {traceback.format_exc()}")
        
        # Send detailed error info for debugging
        error_details = f"""‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞**

üîç **–î–µ—Ç–∞–ª–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏**:
‚Ä¢ –û—à–∏–±–∫–∞: {str(e)}
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id if 'user_id' in locals() else '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}
‚Ä¢ –ß–∞—Ç: {chat_id if 'chat_id' in locals() else '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}
‚Ä¢ –ï—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {chat_id in chat_last_messages if 'chat_id' in locals() else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}

üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
2. –ü–æ–¥–æ–∂–¥–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
3. –°–Ω–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /transcript"""
        
        await message.answer(error_details, parse_mode="Markdown")


@dp.message(Command("–∞–Ω–∞–ª–∏–∑"))
async def cmd_analysis(message: Message):
    """Handle /–∞–Ω–∞–ª–∏–∑ command - psychological analysis"""
    try:
        if not message.from_user:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
            
        user_id = str(message.from_user.id)
        chat_id = str(message.chat.id)
        
        # Get last message data
        last_msg_data = await get_last_message_data(chat_id, user_id)
        if not last_msg_data:
            await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç, –∞ –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/–∞–Ω–∞–ª–∏–∑`")
            return
        
        message_text = last_msg_data["text"]
        timestamp_stored = last_msg_data["timestamp"]
        msg_type = last_msg_data["type"]
        
        # Process with text processor for psychological analysis
        if text_processor:
            try:
                processing_result = await text_processor.process_parallel(message_text)
                
                # Create psychological analysis output
                analysis_text = f"""üé≠ **–ü–°–ò–•–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó**

üìù **–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç**: {msg_type} —Å–æ–æ–±—â–µ–Ω–∏–µ ({len(message_text)} —Å–∏–º–≤–æ–ª–æ–≤)

{processing_result.summary if hasattr(processing_result, 'summary') else '–û—Å–Ω–æ–≤–Ω–æ–π —Å–º—ã—Å–ª'}

üìç **–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:**
{processing_result.bullet_points if hasattr(processing_result, 'bullet_points') else '‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã'}

{processing_result.actions if hasattr(processing_result, 'actions') else ''}

üé≠ **–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:**
{processing_result.tone_analysis if hasattr(processing_result, 'tone_analysis') else '‚Ä¢ –°–∫—Ä—ã—Ç—ã–µ –º–æ—Ç–∏–≤—ã –∏ —ç–º–æ—Ü–∏–∏'}

‚è∞ **–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞**: {datetime.fromtimestamp(timestamp_stored).strftime("%H:%M")}

üí° *–≠—Ç–æ—Ç –∞–Ω–∞–ª–∏–∑ –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è*
"""
                
                await message.answer(analysis_text, parse_mode="Markdown")
                
                logger.info(f"Psychological analysis sent to user {user_id}")
                
            except Exception as analysis_error:
                logger.error(f"Psychological analysis failed: {analysis_error}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –∞–Ω–∞–ª–∏–∑–µ")
        else:
            await message.answer("‚ùå –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        
    except Exception as e:
        logger.error(f"Analysis command failed: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞")


@dp.message(Command("layers"))
async def cmd_layers(message: Message):
    """Handle /layers command - deep analysis of hidden meanings"""
    try:
        if not message.from_user:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
            
        user_id = str(message.from_user.id)
        chat_id = str(message.chat.id)
        
        # Get last message data
        last_msg_data = await get_last_message_data(chat_id, user_id)
        if not last_msg_data:
            await message.answer("""
üîç **–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–µ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω**

–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, 
–∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/layers` –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.

üí° **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç
2. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
3. –í–≤–µ–¥–∏—Ç–µ `/layers` –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∫—Ä—ã—Ç—ã—Ö —Å–º—ã—Å–ª–æ–≤
""", parse_mode="Markdown")
            return
        
        message_text = last_msg_data["text"]
        msg_type = last_msg_data["type"]
        timestamp_stored = last_msg_data["timestamp"]
        
        # Perform deep analysis using text processor
        if text_processor:
            try:
                # Get full analysis with emotion detection
                processing_result = await text_processor.process_parallel(message_text)
                
                # Extract emotion analysis if available
                emotion_analysis = ""
                if hasattr(processing_result, 'emotion_scores') and processing_result.emotion_scores:
                    emotion_analysis = f"""
üé≠ **–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:**
‚Ä¢ –°–∞—Ä–∫–∞–∑–º: {processing_result.emotion_scores.get('sarcasm', 0):.1%}
‚Ä¢ –¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å: {processing_result.emotion_scores.get('toxicity', 0):.1%}
‚Ä¢ –ú–∞–Ω–∏–ø—É–ª—è—Ü–∏—è: {processing_result.emotion_scores.get('manipulation', 0):.1%}
"""
                
                # Create layers analysis
                layers_text = f"""üîç **–ê–ù–ê–õ–ò–ó –°–ö–†–´–¢–´–• –°–ú–´–°–õ–û–í**

üìù **–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç**: {msg_type} —Å–æ–æ–±—â–µ–Ω–∏–µ ({len(message_text)} —Å–∏–º–≤–æ–ª–æ–≤)

{processing_result.summary if hasattr(processing_result, 'summary') else '–û—Å–Ω–æ–≤–Ω–æ–π —Å–º—ã—Å–ª'}

üìç **–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:**
{processing_result.bullet_points if hasattr(processing_result, 'bullet_points') else '‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã'}

{processing_result.actions if hasattr(processing_result, 'actions') else ''}

üé≠ **–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:**
{processing_result.tone_analysis if hasattr(processing_result, 'tone_analysis') else '‚Ä¢ –°–∫—Ä—ã—Ç—ã–µ –º–æ—Ç–∏–≤—ã –∏ —ç–º–æ—Ü–∏–∏'}

{emotion_analysis}

‚è∞ **–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞**: {datetime.fromtimestamp(timestamp_stored).strftime("%H:%M")}

üí° *–≠—Ç–æ—Ç –∞–Ω–∞–ª–∏–∑ –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å –≥–ª—É–±–∏–Ω–Ω—ã–µ —Å–ª–æ–∏ —Å–º—ã—Å–ª–∞ –∏ —Å–∫—Ä—ã—Ç—ã–µ –º–æ—Ç–∏–≤—ã*
"""
                
                await message.answer(layers_text, parse_mode="Markdown")
                
                logger.info(f"Layers analysis sent to user {user_id}")
                
            except Exception as analysis_error:
                logger.error(f"Layers analysis failed: {analysis_error}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–ª–æ–µ–≤ —Å–º—ã—Å–ª–∞")
        else:
            await message.answer("‚ùå –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        
    except Exception as e:
        logger.error(f"Layers command failed: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ —Å–ª–æ–µ–≤")


@dp.message(Command("debug"))
async def cmd_debug(message: Message):
    """Handle /debug command - show stored message state"""
    try:
        if not message.from_user:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
            
        user_id = str(message.from_user.id)
        chat_id = str(message.chat.id)
        
        # Check global state
        total_chats = len(chat_last_messages)
        
        debug_info = f"""üîç **–û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø**

üë§ **–í–∞—à ID**: {user_id}
üí¨ **ID —á–∞—Ç–∞**: {chat_id}
üìä **–í—Å–µ–≥–æ —á–∞—Ç–æ–≤ –≤ –ø–∞–º—è—Ç–∏**: {total_chats}
üÜî **ID —á–∞—Ç–æ–≤**: {list(chat_last_messages.keys())[:5] if chat_last_messages else '–Ω–µ—Ç'}

"""
        
        if chat_id in chat_last_messages:
            last_msg_data = chat_last_messages[chat_id]
            import time
            age_seconds = int(time.time() - last_msg_data["timestamp"])
            age_minutes = age_seconds // 60
            
            debug_info += f"""‚úÖ **–í–∞—à–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ**:
üì± **–¢–∏–ø**: {last_msg_data["type"]}
üìù **–†–∞–∑–º–µ—Ä**: {len(last_msg_data["text"])} —Å–∏–º–≤–æ–ª–æ–≤
‚è∞ **–í–æ–∑—Ä–∞—Å—Ç**: {age_minutes} –º–∏–Ω {age_seconds % 60} —Å–µ–∫
üìã **–ü—Ä–µ–≤—å—é**: {last_msg_data["text"][:100]}...

‚úÖ **–ö–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã**: /transcript –∏ /advice –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
        else:
            debug_info += f"""‚ùå **–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ù–ï –Ω–∞–π–¥–µ–Ω–æ**

üí° **–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥**:
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç
2. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /transcript –∏–ª–∏ /advice

üîÑ **–°–æ–æ–±—â–µ–Ω–∏—è —Ö—Ä–∞–Ω—è—Ç—Å—è 1 —á–∞—Å**"""
        
        await message.answer(debug_info, parse_mode="Markdown")
        
        logger.info(f"Debug info sent to user {user_id}, has_message: {chat_id in chat_last_messages}")
        
    except Exception as e:
        logger.error(f"Debug command failed: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")


@dp.message(Command("advice"))
async def cmd_advice(message: Message):
    """Handle /advice command - get advice for last message"""
    try:
        if not message.from_user:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
            
        user_id = str(message.from_user.id)
        chat_id = str(message.chat.id)
        
        # Check if user has any recent messages
        if chat_id not in chat_last_messages:
            await message.answer("""
ü§ñ **–°–æ–≤–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω**

–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, 
–∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/advice` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–≤–µ—Ç–∞.

üí° **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç
2. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
3. –í–≤–µ–¥–∏—Ç–µ `/advice` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–≤–µ—Ç–∞
""", parse_mode="Markdown")
            return
        
        # Get last message data
        last_msg_data = await get_last_message_data(chat_id, user_id)
        if not last_msg_data:
            await message.answer("""
ü§ñ **–°–æ–≤–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω**

–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, 
–∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/advice` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–≤–µ—Ç–∞.
""", parse_mode="Markdown")
            return
        
        message_text = last_msg_data["text"]
        msg_type = last_msg_data["type"]
        timestamp_stored = last_msg_data["timestamp"]
        
        # Generate advice based on user ID (4 different archetypes)
        advice_responses = [
            {
                "title": "üí° –°–æ–≤–µ—Ç –º—É–¥—Ä–µ—Ü–∞",
                "text": "–ù–∞–π–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–¥—É–º–∞—Ç—å –Ω–∞–¥ –∫–ª—é—á–µ–≤—ã–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è. –ß—Ç–æ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ? –ö–∞–∫–∏–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è? –ò–Ω–æ–≥–¥–∞ –ª—É—á—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ –ø–∞—É–∑—ã –∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è.",
                "style": "–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑"
            },
            {
                "title": "üé≠ –¢–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥", 
                "text": "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—é —Å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã. –ö–∞–∫–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –≤—ã –≤–∏–¥–∏—Ç–µ? –ß—Ç–æ, –µ—Å–ª–∏ –ø–æ–¥–æ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å—É —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –ø–æ-–¥—Ä—É–≥–æ–º—É? –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å —á–∞—Å—Ç–æ —Ä–æ–∂–¥–∞–µ—Ç –ª—É—á—à–∏–µ —Ä–µ—à–µ–Ω–∏—è.",
                "style": "–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ"
            },
            {
                "title": "‚ù§Ô∏è –≠–º–ø–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–∑–≥–ª—è–¥",
                "text": "–£—á—Ç–∏—Ç–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–æ—Å—Ç–∞–≤–ª—è—é—â—É—é —Å–∏—Ç—É–∞—Ü–∏–∏. –ß—Ç–æ —á—É–≤—Å—Ç–≤—É—é—Ç –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏? –ö–∞–∫ –≤–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è –º–æ–≥—É—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏—è? –ü–æ–Ω–∏–º–∞–Ω–∏–µ —ç–º–æ—Ü–∏–π —á–∞—Å—Ç–æ –∫–ª—é—á –∫ —Ä–µ—à–µ–Ω–∏—é.",
                "style": "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"
            },
            {
                "title": "üÉè –ò–≥—Ä–æ–≤–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞",
                "text": "–ò–Ω–æ–≥–¥–∞ –ª—É—á—à–∏–π —Å–æ–≤–µ—Ç - –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤—Å—ë —Å–ª–∏—à–∫–æ–º —Å–µ—Ä—å–µ–∑–Ω–æ. –ú–æ–∂–Ω–æ –ª–∏ –Ω–∞–π—Ç–∏ –∑–¥–µ—Å—å —á—Ç–æ-—Ç–æ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –∏–ª–∏ –∑–∞–±–∞–≤–Ω–æ–µ? –õ–µ–≥–∫–æ—Å—Ç—å –∏ —é–º–æ—Ä –ø–æ–º–æ–≥–∞—é—Ç —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏.",
                "style": "–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π"
            }
        ]
        
        # Select response based on user ID
        response_index = hash(str(user_id)) % len(advice_responses)
        selected_response = advice_responses[response_index]
        
        # Create advice message
        advice_text = f"""
ü§ñ **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç**

{selected_response['title']}

{selected_response['text']}

üìù **–ö–æ–Ω—Ç–µ–∫—Å—Ç**: {msg_type} —Å–æ–æ–±—â–µ–Ω–∏–µ ({len(message_text)} —Å–∏–º–≤–æ–ª–æ–≤)
üé® **–°—Ç–∏–ª—å**: {selected_response['style']}
‚è∞ **–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞**: {datetime.fromtimestamp(timestamp_stored).strftime("%H:%M")}

üí≠ *–°–æ–≤–µ—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –≤–∞—à–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–º –ø—Ä–æ—Ñ–∏–ª–µ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è*

üîÑ –î–ª—è –¥—Ä—É–≥–æ–≥–æ —Å—Ç–∏–ª—è —Å–æ–≤–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ `/advice` —Å–Ω–æ–≤–∞
"""
        
        await message.answer(advice_text, parse_mode="Markdown")
        
        logger.info(f"Advice sent to user {user_id}, archetype: {selected_response['title']}")
        
    except Exception as e:
        logger.error(f"Advice command failed: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–≤–µ—Ç–∞")


@dp.message(F.voice)
async def handle_voice_message(message: Message):
    """Handle voice messages with speech processing pipeline"""
    try:
        if not message.voice:
            await message.reply("‚ùå –û—à–∏–±–∫–∞: –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
            
        if not message.from_user:
            await message.reply("‚ùå –û—à–∏–±–∫–∞: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
            
        user_id = str(message.from_user.id)
        file_id = message.voice.file_id
        duration = message.voice.duration
        
        logger.info(f"Received voice message from user {user_id}, "
                   f"duration: {duration}s, file_id: {file_id}")
        
        # Send processing notification
        processing_msg = await message.answer("üéôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        if not speech_pipeline:
            await processing_msg.edit_text("‚ùå –°–∏—Å—Ç–µ–º–∞ —Ä–µ—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return
        
        # Process voice message through pipeline
        try:
            transcribed_text = await speech_pipeline.process_voice_message(
                file_id, user_id, bot=bot, chat_id=str(message.chat.id)
            )
            
            # Store the transcribed text for commands
            import time
            chat_id = str(message.chat.id)
            chat_last_messages[chat_id] = {
                "text": transcribed_text,
                "timestamp": time.time(),
                "type": "voice",
                "user_id": user_id
            }
            logger.info(f"Stored voice message for chat {chat_id}, user {user_id}, total chats: {len(chat_last_messages)}")
            logger.info(f"Available chats after storing: {list(chat_last_messages.keys())}")
            
            # Update processing message
            await processing_msg.edit_text("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ...")
            
            # Try SummaryEngine first if available
            summary_result = await process_with_summary_engine(
                transcribed_text, 
                ContentType.TELEGRAM_VOICE, 
                duration
            )
            
            if summary_result:
                # Use SummaryEngine result with inline buttons
                await processing_msg.edit_text(
                    summary_result, 
                    parse_mode="Markdown",
                    reply_markup=create_transcript_buttons()
                )
            else:
                # Fallback to original text processor
                if text_processor:
                    try:
                        processing_result = await text_processor.process_parallel(transcribed_text)
                        formatted_output = text_processor.format_output(processing_result)
                        
                        # Create simplified output - keep practical insights including actions
                        simplified_output = f"""üìù **–û—Å–Ω–æ–≤–Ω—ã–µ –º—ã—Å–ª–∏**

{processing_result.summary if hasattr(processing_result, 'summary') else '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω'}

üìç **–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:**
{processing_result.bullet_points if hasattr(processing_result, 'bullet_points') else '‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –≤—ã–¥–µ–ª–µ–Ω—ã'}

üëâ **–¢—Ä–µ–±—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**
{processing_result.actions if hasattr(processing_result, 'actions') and processing_result.actions else '‚Ä¢ –î–µ–π—Å—Ç–≤–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è'}

‚è±Ô∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ {processing_result.processing_time:.1f}—Å

üì± **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/transcript` - –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ `/advice` - –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç –æ—Ç –∞—Ä—Ö–µ—Ç–∏–ø–∞
‚Ä¢ `/–∞–Ω–∞–ª–∏–∑` - –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (–Ω–∞–º–µ—Ä–µ–Ω–∏—è, —ç–º–æ—Ü–∏–∏, —Å—Ç–∏–ª—å)
‚Ä¢ `/layers` - –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–∫—Ä—ã—Ç—ã—Ö —Å–º—ã—Å–ª–æ–≤ –∏ –º–æ—Ç–∏–≤–æ–≤"""
                        
                        await processing_msg.edit_text(
                            simplified_output, 
                            parse_mode="Markdown",
                            reply_markup=create_transcript_buttons()
                        )
                        
                    except Exception as text_error:
                        logger.error(f"Text processing error: {text_error}")
                        # Fallback to transcription only
                        fallback_text = f"""
üìù **–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏**

**–¢–µ–∫—Å—Ç:**
{transcribed_text}

‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏)
‚è±Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞

üì± **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/transcript` - –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ `/advice` - –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç –æ—Ç –∞—Ä—Ö–µ—Ç–∏–ø–∞
‚Ä¢ `/–∞–Ω–∞–ª–∏–∑` - –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (–Ω–∞–º–µ—Ä–µ–Ω–∏—è, —ç–º–æ—Ü–∏–∏, —Å—Ç–∏–ª—å)
‚Ä¢ `/layers` - –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–∫—Ä—ã—Ç—ã—Ö —Å–º—ã—Å–ª–æ–≤ –∏ –º–æ—Ç–∏–≤–æ–≤
"""
                        await processing_msg.edit_text(
                            fallback_text, 
                            parse_mode="Markdown",
                            reply_markup=create_transcript_buttons()
                        )
                else:
                    # Text processor not initialized - fallback to transcription only
                    fallback_text = f"""
üìù **–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏**

**–¢–µ–∫—Å—Ç:**
{transcribed_text}

‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω)
‚è±Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞

üì± **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/transcript` - –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ `/advice` - –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç –æ—Ç –∞—Ä—Ö–µ—Ç–∏–ø–∞
‚Ä¢ `/–∞–Ω–∞–ª–∏–∑` - –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (–Ω–∞–º–µ—Ä–µ–Ω–∏—è, —ç–º–æ—Ü–∏–∏, —Å—Ç–∏–ª—å)
‚Ä¢ `/layers` - –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–∫—Ä—ã—Ç—ã—Ö —Å–º—ã—Å–ª–æ–≤ –∏ –º–æ—Ç–∏–≤–æ–≤
"""
                    await processing_msg.edit_text(
                        fallback_text, 
                        parse_mode="Markdown",
                        reply_markup=create_transcript_buttons()
                    )
            
        except SpeechPipelineError as e:
            logger.error(f"Speech pipeline error: {e}")
            
            # Check if user was already notified to avoid duplicate messages
            if hasattr(e, 'user_notified') and e.user_notified:
                # User already received the error message directly, just clean up
                await processing_msg.delete()
            else:
                # Normal error handling - send error message
                await processing_msg.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
            
    except Exception as e:
        logger.error(f"Error processing voice message: {e}")
        await message.answer("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")


@dp.message(F.video_note)
async def handle_video_note(message: Message):
    """Handle video notes (–∫—Ä—É–≥–ª—ã–µ –≤–∏–¥–µ–æ)"""
    try:
        if not message.video_note:
            await message.reply("‚ùå –û—à–∏–±–∫–∞: –í–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
            
        if not message.from_user:
            await message.reply("‚ùå –û—à–∏–±–∫–∞: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
            
        user_id = str(message.from_user.id)
        file_id = message.video_note.file_id
        duration = message.video_note.duration
        
        logger.info(f"Received video note from user {user_id}, "
                   f"duration: {duration}s, file_id: {file_id}")
        
        processing_msg = await message.answer("üé• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        if not speech_pipeline:
            await processing_msg.edit_text("‚ùå –°–∏—Å—Ç–µ–º–∞ —Ä–µ—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return
        
        # Process video note through the same pipeline (audio extraction handled internally)
        try:
            transcribed_text = await speech_pipeline.process_voice_message(
                file_id, user_id, bot=bot, chat_id=str(message.chat.id)
            )
            
            # Store the transcribed text for commands
            import time
            chat_id = str(message.chat.id)
            chat_last_messages[chat_id] = {
                "text": transcribed_text,
                "timestamp": time.time(),
                "type": "video",
                "user_id": user_id
            }
            logger.info(f"Stored video message for chat {chat_id}, total chats: {len(chat_last_messages)}")
            
            # Update processing message
            await processing_msg.edit_text("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ...")
            
            # Try SummaryEngine first if available
            summary_result = await process_with_summary_engine(
                transcribed_text, 
                ContentType.TELEGRAM_VIDEO_NOTE, 
                duration
            )
            
            if summary_result:
                # Use SummaryEngine result with inline buttons
                await processing_msg.edit_text(
                    summary_result, 
                    parse_mode="Markdown",
                    reply_markup=create_transcript_buttons()
                )
            else:
                # Fallback to original text processor
                if text_processor:
                    try:
                        processing_result = await text_processor.process_parallel(transcribed_text)
                        formatted_output = text_processor.format_output(processing_result)
                        
                        # Create simplified output for video notes
                        simplified_output = f"""üìù **–û—Å–Ω–æ–≤–Ω—ã–µ –º—ã—Å–ª–∏**

{processing_result.summary if hasattr(processing_result, 'summary') else '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω'}

üìç **–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:**
{processing_result.bullet_points if hasattr(processing_result, 'bullet_points') else '‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –≤—ã–¥–µ–ª–µ–Ω—ã'}

üëâ **–¢—Ä–µ–±—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**
{processing_result.actions if hasattr(processing_result, 'actions') and processing_result.actions else '‚Ä¢ –î–µ–π—Å—Ç–≤–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è'}

‚è±Ô∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ {processing_result.processing_time:.1f}—Å

üì± **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/transcript` - –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ `/advice` - –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç –æ—Ç –∞—Ä—Ö–µ—Ç–∏–ø–∞
‚Ä¢ `/–∞–Ω–∞–ª–∏–∑` - –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (–Ω–∞–º–µ—Ä–µ–Ω–∏—è, —ç–º–æ—Ü–∏–∏, —Å—Ç–∏–ª—å)
‚Ä¢ `/layers` - –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–∫—Ä—ã—Ç—ã—Ö —Å–º—ã—Å–ª–æ–≤ –∏ –º–æ—Ç–∏–≤–æ–≤"""
                        
                        await processing_msg.edit_text(
                            simplified_output, 
                            parse_mode="Markdown",
                            reply_markup=create_transcript_buttons()
                        )
                        
                    except Exception as text_error:
                        logger.error(f"Text processing error: {text_error}")
                        # Fallback to transcription only
                        fallback_text = f"""
üìù **–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏—è**

**–¢–µ–∫—Å—Ç:**
{transcribed_text}

‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏)
‚è±Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞

üì± **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/transcript` - –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ `/advice` - –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç –æ—Ç –∞—Ä—Ö–µ—Ç–∏–ø–∞
‚Ä¢ `/–∞–Ω–∞–ª–∏–∑` - –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (–Ω–∞–º–µ—Ä–µ–Ω–∏—è, —ç–º–æ—Ü–∏–∏, —Å—Ç–∏–ª—å)
‚Ä¢ `/layers` - –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–∫—Ä—ã—Ç—ã—Ö —Å–º—ã—Å–ª–æ–≤ –∏ –º–æ—Ç–∏–≤–æ–≤
"""
                        await processing_msg.edit_text(
                            fallback_text, 
                            parse_mode="Markdown",
                            reply_markup=create_transcript_buttons()
                        )
                else:
                    # Text processor not initialized - fallback to transcription only
                    fallback_text = f"""
üìù **–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏—è**

**–¢–µ–∫—Å—Ç:**
{transcribed_text}

‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω)
‚è±Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞

üì± **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/transcript` - –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ `/advice` - –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç –æ—Ç –∞—Ä—Ö–µ—Ç–∏–ø–∞
‚Ä¢ `/–∞–Ω–∞–ª–∏–∑` - –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (–Ω–∞–º–µ—Ä–µ–Ω–∏—è, —ç–º–æ—Ü–∏–∏, —Å—Ç–∏–ª—å)
‚Ä¢ `/layers` - –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–∫—Ä—ã—Ç—ã—Ö —Å–º—ã—Å–ª–æ–≤ –∏ –º–æ—Ç–∏–≤–æ–≤
"""
                    await processing_msg.edit_text(
                        fallback_text, 
                        parse_mode="Markdown",
                        reply_markup=create_transcript_buttons()
                    )
            
        except SpeechPipelineError as e:
            logger.error(f"Video note processing error: {e}")
            
            # Check if user was already notified to avoid duplicate messages  
            if hasattr(e, 'user_notified') and e.user_notified:
                # User already received the error message directly, just clean up
                await processing_msg.delete()
            else:
                # Normal error handling - send error message
                await processing_msg.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {str(e)}\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
            
    except Exception as e:
        logger.error(f"Error processing video note: {e}")
        await message.answer("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏—è")


@dp.message(F.text & ~F.command)
async def handle_text_message(message: Message):
    """Handle text messages, forwards, and quotes with enhanced processing"""
    try:
        if not message.text:
            await message.reply("‚ùå –û—à–∏–±–∫–∞: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        if not message.from_user:
            await message.reply("‚ùå –û—à–∏–±–∫–∞: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
            
        user_id = str(message.from_user.id)
        text_content = message.text.strip()
        
        # Check for minimum text length
        if len(text_content) < 5:
            await message.reply("üìù –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
        
        logger.info(f"Received text message from user {user_id}, "
                   f"length: {len(text_content)} chars")
        
        # Store the text for commands
        import time
        chat_id = str(message.chat.id)
        chat_last_messages[chat_id] = {
            "text": text_content,
            "timestamp": time.time(),
            "type": "text",
            "user_id": user_id
        }
        logger.info(f"Stored text message for chat {chat_id}, total chats: {len(chat_last_messages)}")
        
        # Send processing notification
        processing_msg = await message.answer("üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç...")
        
        # Process text through enhanced pipeline with emotion analysis
        if text_processor:
            try:
                processing_result = await text_processor.process_parallel(text_content)
                formatted_output = text_processor.format_output(processing_result)
                
                # Create simplified output for text messages
                simplified_output = f"""üìù **–û—Å–Ω–æ–≤–Ω—ã–µ –º—ã—Å–ª–∏**

{processing_result.summary if hasattr(processing_result, 'summary') else '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω'}

üìç **–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:**
{processing_result.bullet_points if hasattr(processing_result, 'bullet_points') else '‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –≤—ã–¥–µ–ª–µ–Ω—ã'}

üëâ **–¢—Ä–µ–±—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**
{processing_result.actions if hasattr(processing_result, 'actions') and processing_result.actions else '‚Ä¢ –î–µ–π—Å—Ç–≤–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è'}

‚è±Ô∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ {processing_result.processing_time:.1f}—Å

üì± **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/transcript` - –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ `/advice` - –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç –æ—Ç –∞—Ä—Ö–µ—Ç–∏–ø–∞
‚Ä¢ `/–∞–Ω–∞–ª–∏–∑` - –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (–Ω–∞–º–µ—Ä–µ–Ω–∏—è, —ç–º–æ—Ü–∏–∏, —Å—Ç–∏–ª—å)
‚Ä¢ `/layers` - –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–∫—Ä—ã—Ç—ã—Ö —Å–º—ã—Å–ª–æ–≤ –∏ –º–æ—Ç–∏–≤–æ–≤"""
                
                await processing_msg.edit_text(simplified_output, parse_mode="Markdown")
                
            except Exception as text_error:
                logger.error(f"Text processing error: {text_error}")
                # Fallback to basic response
                fallback_text = f"""
üìù **–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞**

**–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:**
{text_content}

‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏)
‚è±Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞

üì± **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/transcript` - –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
‚Ä¢ `/advice` - –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç
‚Ä¢ `/–∞–Ω–∞–ª–∏–∑` - –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
‚Ä¢ `/layers` - –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–º—ã—Å–ª–æ–≤
"""
                await processing_msg.edit_text(fallback_text, parse_mode="Markdown")
        else:
            # Text processor not initialized
            await processing_msg.edit_text(
                "‚ùå –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"
            )
            
    except Exception as e:
        logger.error(f"Error processing text message: {e}")
        await message.answer("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞")


@dp.message(F.document)
async def handle_document(message: Message):
    """Handle document uploads (PDF, DOC, etc.) with SummaryEngine"""
    try:
        if not message.document:
            await message.reply("‚ùå –û—à–∏–±–∫–∞: –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        if not message.from_user:
            await message.reply("‚ùå –û—à–∏–±–∫–∞: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
            
        user_id = str(message.from_user.id)
        file_id = message.document.file_id
        file_name = message.document.file_name
        file_size = message.document.file_size
        
        logger.info(f"Received document from user {user_id}, "
                   f"file: {file_name}, size: {file_size} bytes")
        
        # Check if SummaryEngine is available
        if not summary_engine or not summary_engine.enabled:
            await message.reply(
                "üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏."
            )
            return
        
        # Check file size (limit to 50MB - Telegram API limit)
        if file_size and file_size > 50 * 1024 * 1024:
            await message.reply("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB (–ª–∏–º–∏—Ç Telegram)")
            return
        
        # Check file type
        supported_extensions = ['.pdf', '.doc', '.docx', '.txt', '.rtf']
        file_ext = Path(file_name).suffix.lower() if file_name else ''
        
        if file_ext not in supported_extensions:
            await message.reply(
                f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {file_ext}\n"
                f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(supported_extensions)}"
            )
            return
        
        # Send processing notification
        processing_msg = await message.answer("üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç...")
        
        try:
            # For now, we'll extract text from the document
            # In a full implementation, you'd need to add document text extraction
            # For now, we'll use a placeholder approach
            
            # Download the file
            file = await bot.get_file(file_id)
            file_path = file.file_path
            
            # Extract text (placeholder - in real implementation, you'd use libraries like PyPDF2, python-docx)
            # For now, we'll create a placeholder text
            placeholder_text = f"""
–î–æ–∫—É–º–µ–Ω—Ç: {file_name}
–†–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç
–¢–∏–ø: {file_ext}

–≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –í –ø–æ–ª–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞.

–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SummaryEngine –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –∫–∞–∫ –ø—Ä–∏–º–µ—Ä –¥–ª–∏–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è LONGFORM —Ä–µ–∂–∏–º–∞.
"""
            
            # Process with SummaryEngine
            result = await summary_engine.process_summary(
                text=placeholder_text,
                content_type=ContentType.TELEGRAM_DOCUMENT
            )
            
            if result.success:
                # Format output for LONGFORM mode
                output = f"""üìÑ **–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {file_name}**

{result.summary}

‚è±Ô∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ {result.processing_time:.1f}—Å
üéØ –†–µ–∂–∏–º: {result.mode.value.upper()}
üìä –¢–æ–∫–µ–Ω—ã: {result.token_count}
"""
                
                await processing_msg.edit_text(output, parse_mode="Markdown")
            else:
                # Fallback response
                fallback = summary_engine.get_fallback_response(placeholder_text)
                await processing_msg.edit_text(fallback, parse_mode="Markdown")
                
        except Exception as doc_error:
            logger.error(f"Document processing error: {doc_error}")
            await processing_msg.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(doc_error)}"
            )
            
    except Exception as e:
        logger.error(f"Error processing document: {e}")
        await message.answer("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞")


@dp.message(F.video)
async def handle_video(message: Message):
    """Handle video files with SummaryEngine"""
    try:
        if not message.video:
            await message.reply("‚ùå –û—à–∏–±–∫–∞: –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
            
        if not message.from_user:
            await message.reply("‚ùå –û—à–∏–±–∫–∞: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
            
        user_id = str(message.from_user.id)
        file_id = message.video.file_id
        duration = message.video.duration
        file_size = message.video.file_size
        
        logger.info(f"Received video from user {user_id}, "
                   f"duration: {duration}s, size: {file_size} bytes")
        
        # Check if SummaryEngine is available
        if not summary_engine or not summary_engine.enabled:
            await message.reply(
                "üé• –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –∑–∞–º–µ—Ç–∫—É (–∫—Ä—É–≥–ª–æ–µ –≤–∏–¥–µ–æ)."
            )
            return
        
        # Check file size (limit to 50MB - Telegram API limit)
        if file_size and file_size > 50 * 1024 * 1024:
            await message.reply("‚ùå –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB (–ª–∏–º–∏—Ç Telegram)")
            return
        
        # Send processing notification
        processing_msg = await message.answer("üé• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ...")
        
        try:
            # For now, we'll use the speech pipeline to extract audio and transcribe
            # In a full implementation, you might want to use video processing libraries
            
            if speech_pipeline:
                # Extract audio and transcribe
                transcribed_text = await speech_pipeline.process_voice_message(
                    file_id, user_id, bot=bot, chat_id=str(message.chat.id)
                )
                
                # Process with SummaryEngine
                result = await summary_engine.process_summary(
                    text=transcribed_text,
                    content_type=ContentType.TELEGRAM_VIDEO,
                    duration=duration
                )
                
                if result.success:
                    # Format output for LONGFORM mode
                    output = f"""üé• **–ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ**

{result.summary}

‚è±Ô∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ {result.processing_time:.1f}—Å
üéØ –†–µ–∂–∏–º: {result.mode.value.upper()}
üìä –¢–æ–∫–µ–Ω—ã: {result.token_count}
‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ: {duration}—Å
"""
                    
                    await processing_msg.edit_text(output, parse_mode="Markdown")
                else:
                    # Fallback response
                    fallback = summary_engine.get_fallback_response(transcribed_text)
                    await processing_msg.edit_text(fallback, parse_mode="Markdown")
            else:
                await processing_msg.edit_text(
                    "‚ùå –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—á–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"
                )
                
        except Exception as video_error:
            logger.error(f"Video processing error: {video_error}")
            await processing_msg.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {str(video_error)}"
            )
            
    except Exception as e:
        logger.error(f"Error processing video: {e}")
        await message.answer("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ")


@dp.message(Command("list_modes"))
async def cmd_list_modes(message: Message):
    """Handle /list_modes command"""
    modes_text = """
üîß **–†–µ–∂–∏–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏**

**–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º:** Speech-to-Text
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç faster-whisper –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–æ–≤
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
‚Ä¢ –û–±—É—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤—ã–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

**–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ —Ä–µ–∂–∏–º—ã:**
‚Ä¢ LLM –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è (GPT-4)
‚Ä¢ –¢–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π
‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø—É–Ω–∫—Ç–æ–≤
‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ —Ä–µ–∂–∏–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏

–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!
"""
    await message.answer(modes_text, parse_mode="Markdown")


@dp.message(Command("limits"))
async def cmd_limits(message: Message):
    """Handle /limits command - show file size limits"""
    limits_text = """
üìè **–õ–∏–º–∏—Ç—ã —Ñ–∞–π–ª–æ–≤**

**Telegram API –ª–∏–º–∏—Ç—ã:**
‚Ä¢ üé• –í–∏–¥–µ–æ —Ñ–∞–π–ª—ã: **50MB**
‚Ä¢ üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã (PDF, DOC, TXT): **50MB**
‚Ä¢ üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: **50MB**
‚Ä¢ üì∏ –§–æ—Ç–æ: **10MB**

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ –î–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∂–∞—Ç–∏–µ
‚Ä¢ –í–∏–¥–µ–æ –º–æ–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã –º–æ–∂–Ω–æ —Ä–∞–∑–±–∏—Ç—å –Ω–∞ —á–∞—Å—Ç–∏

**–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –≠—Ç–∏ –ª–∏–º–∏—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã Telegram API –∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω—ã.
"""
    await message.answer(limits_text, parse_mode="Markdown")


@dp.message(Command("set_model"))
async def cmd_set_model(message: Message):
    """Handle /set_model command"""
    info_text = """
üîß **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–µ–π**

–§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–µ–π –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö.

**–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –í—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ –º–æ–¥–µ–ª–∏ Whisper (base/small/medium)
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —è–∑—ã–∫–æ–≤—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ä–µ–∂–∏–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ vs —Å–∫–æ—Ä–æ—Å—Ç–∏

–¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞.
"""
    await message.answer(info_text, parse_mode="Markdown")


from aiogram.types import CallbackQuery

@dp.callback_query()
async def handle_button_callback(callback_query: CallbackQuery):
    """Handle button interactions - transcript buttons and Redis-dependent features"""
    try:
        data = callback_query.data
        user_id = str(callback_query.from_user.id)
        chat_id = str(callback_query.message.chat.id)
        
        logger.info(f"Callback received: data='{data}', user_id={user_id}, chat_id={chat_id}")
        
        # Handle transcript buttons
        if data == "show_transcript":
            logger.info(f"Handling show_transcript for user {user_id} in chat {chat_id}")
            await handle_show_transcript(callback_query)
            return
        elif data == "download_txt":
            logger.info(f"Handling download_txt for user {user_id} in chat {chat_id}")
            await handle_download_txt(callback_query)
            return
        
        # Handle Redis-dependent features
        if button_ui_manager:
            # Use the full button UI manager if available
            result = await button_ui_manager.handle_callback(
                callback_query=callback_query,
                bot=bot
            )
            
            if not result:
                await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å", show_alert=True)
        else:
            # No button functionality without Redis - inform user about commands
            await callback_query.answer("""
ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /transcript - –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
‚Ä¢ /summary - –ø–æ–ª—É—á–∏—Ç—å —Å–∞–º–º–∞—Ä–∏
‚Ä¢ /advice - –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç
‚Ä¢ /–∞–Ω–∞–ª–∏–∑ - –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
‚Ä¢ /layers - –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑
""", show_alert=True)
                
    except Exception as e:
        logger.error(f"Error handling button callback: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", show_alert=True)


async def handle_show_transcript(callback_query: CallbackQuery):
    """Handle show transcript button"""
    try:
        user_id = str(callback_query.from_user.id)
        chat_id = str(callback_query.message.chat.id)
        
        logger.info(f"handle_show_transcript: user_id={user_id}, chat_id={chat_id}")
        logger.info(f"Available chats: {list(chat_last_messages.keys())}")
        
        # Get last message data
        last_msg_data = await get_last_message_data(chat_id, user_id)
        if not last_msg_data:
            logger.warning(f"No message data found for chat {chat_id}, user {user_id}")
            await callback_query.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∫–∞–∑–∞", show_alert=True)
            return
        
        text = last_msg_data["text"]
        
        if len(text) <= 4096:
            # Send as text message
            transcript_text = f"""üìù **–¢–†–ê–ù–°–ö–†–ò–ü–¢**

{text}

---
üí° *–î–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è - –≤—ã–¥–µ–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤—ã—à–µ*"""
            await callback_query.message.answer(transcript_text, parse_mode="Markdown")
            await callback_query.answer("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        else:
            # Send as file
            await send_transcript_text(callback_query.message, text, chat_id, user_id)
            await callback_query.answer("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ —Ñ–∞–π–ª")
            
    except Exception as e:
        logger.error(f"Error handling show transcript: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞", show_alert=True)


async def handle_download_txt(callback_query: CallbackQuery):
    """Handle download txt button"""
    try:
        user_id = str(callback_query.from_user.id)
        chat_id = str(callback_query.message.chat.id)
        
        logger.info(f"handle_download_txt: user_id={user_id}, chat_id={chat_id}")
        logger.info(f"Available chats: {list(chat_last_messages.keys())}")
        
        # Get last message data
        last_msg_data = await get_last_message_data(chat_id, user_id)
        if not last_msg_data:
            logger.warning(f"No message data found for chat {chat_id}, user {user_id}")
            await callback_query.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è", show_alert=True)
            return
        
        text = last_msg_data["text"]
        
        # Always send as file for download button
        await send_transcript_text(callback_query.message, text, chat_id, user_id)
        await callback_query.answer("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        
    except Exception as e:
        logger.error(f"Error handling download txt: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞", show_alert=True)


@dp.error()
async def error_handler(event: ErrorEvent):
    """Global error handler"""
    logger.error(f"Update {event.update} caused error {event.exception}")


# Health check endpoint for Docker
async def health_check(request):
    """Health check endpoint"""
    try:
        # Simple health check - just return OK if server is running
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        bot_status = 'running'
        pipeline_status = 'ready' if speech_pipeline else 'initializing'
        pipeline_details = ""
        
        # Try to check speech pipeline if available
        if speech_pipeline:
            try:
                health_result = await speech_pipeline.health_check()
                pipeline_details = f"\nüîç Details: {health_result.get('status', 'unknown')}"
            except Exception as e:
                pipeline_details = f"\n‚ö†Ô∏è Warning: {str(e)}"
                logger.warning(f"Pipeline health check failed: {e}")
        
        return web.Response(
            text=f"‚úÖ Bot Status: healthy\n"
                 f"üìÖ Time: {timestamp}\n"
                 f"ü§ñ Telegram: {bot_status}\n"
                 f"üé§ Pipeline: {pipeline_status}{pipeline_details}\n"
                 f"üåê Ready to receive webhooks!",
            status=200
        )
        
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return web.Response(
            text=f"‚ùå Health check error: {str(e)}\n"
                 f"üìÖ Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
                 f"‚ÑπÔ∏è  This is a temporary error",
            status=500
        )


async def startup():
    """Initialize the bot systems"""
    global openai_client, text_processor, speech_pipeline, redis_client, archetype_system, button_ui_manager, summary_engine
    
    logger.info("üöÄ BOT STARTUP - Railway Deployment Check")
    logger.info("========================================")
    logger.info("üÜï VERSION: 2025-08-02 ENHANCED v3.2")
    logger.info("üÜï FEATURE: Simplified analysis + deep layers command")
    logger.info("üÜï SIMPLIFIED: Basic output, complex analysis under /layers")
    logger.info("üÜï COMMANDS: /transcript /advice /layers work reliably")
    logger.info("========================================")
    logger.info(f"Python version: {sys.version}")
    logger.info(f"Working directory: {os.getcwd()}")
    
    try:
        logger.info("=== STARTUP INITIALIZATION ===")
        
        # Check environment variables
        telegram_token = os.getenv("TELEGRAM_TOKEN")
        openai_api_key = os.getenv("OPENAI_API_KEY")
        webhook_url = os.getenv("WEBHOOK_URL")
        port = os.getenv("PORT")
        
        logger.info(f"Environment check:")
        logger.info(f"- TELEGRAM_TOKEN: {'‚úì Set' if telegram_token else '‚úó Missing'}")
        logger.info(f"- OPENAI_API_KEY: {'‚úì Set' if openai_api_key else '‚úó Missing'}")
        logger.info(f"- WEBHOOK_URL: {webhook_url if webhook_url else 'Not set (polling mode)'}")
        logger.info(f"- PORT: {port if port else 'Default'}")
        
        if not openai_api_key:
            raise ValueError("OPENAI_API_KEY not found in environment variables")
        
        logger.info("Initializing speech processing pipeline...")
        
        # Create speech pipeline (this will load the Whisper model)
        speech_pipeline = await SpeechPipelineFactory.create_pipeline(bot, redis_client=None)
        
        logger.info("‚úì Speech processing pipeline initialized successfully")
        
        # Initialize text processor
        logger.info("Initializing text processor...")
        text_processor = TextProcessor(openai_api_key)
        logger.info("‚úì Text processor initialized successfully")
        
        # Initialize enhanced systems (Phase 3)
        # Fully re-enabled for complete functionality
        logger.info("Initializing enhanced systems...")
        
        # Initialize Redis client
        redis_host = os.getenv("REDIS_HOST", "localhost")
        redis_port = int(os.getenv("REDIS_PORT", "6379"))
        redis_password = os.getenv("REDIS_PASSWORD")
        
        logger.info(f"Attempting Redis connection to {redis_host}:{redis_port}")
        logger.info(f"Redis password configured: {'Yes' if redis_password else 'No'}")
        try:
            redis_client = redis.Redis(
                host=redis_host,
                port=redis_port, 
                password=redis_password,
                decode_responses=True
            )
            # Test connection
            await redis_client.ping()
            logger.info("‚úÖ Redis client initialized and connected successfully")
            logger.info("‚úÖ Enhanced UI features will be ENABLED")
        except Exception as redis_error:
            logger.error(f"‚ùå Redis connection failed: {redis_error}")
            logger.error("‚ùå Enhanced UI features will be DISABLED")
            logger.info("‚úÖ Fallback button functionality will be ENABLED")
            redis_client = None
        
        # Initialize archetype system
        logger.info("Initializing archetype system...")
        if text_processor and text_processor.client:
            archetype_system = create_archetype_system(text_processor.client)
            logger.info("‚úì Archetype system initialized")
        else:
            archetype_system = None
            logger.error("Archetype system disabled (no OpenAI client)")
        
        # Initialize button UI manager
        logger.info(f"Initializing button UI manager... Redis: {redis_client is not None}, Archetype: {archetype_system is not None}")
        if redis_client and archetype_system:
            try:
                button_ui_manager = create_button_ui_manager(redis_client, archetype_system)
                logger.info("‚úì Button UI manager initialized")
            except Exception as ui_error:
                logger.error(f"Button UI manager initialization failed: {ui_error}")
                button_ui_manager = None
        else:
            button_ui_manager = None
            logger.info(f"üîÑ Button UI Manager: Using FALLBACK mode (Redis: {redis_client is not None}, Archetype: {archetype_system is not None})")
            logger.info("‚úÖ Fallback buttons will provide basic advice and transcript functionality")
        
        # Initialize SummaryEngine for two-mode summarization
        logger.info("Initializing SummaryEngine...")
        if text_processor and text_processor.client:
            try:
                summary_engine = create_summary_engine(text_processor.client)
                # Enable SummaryEngine if feature flag is set
                if os.getenv('TLDRBUDDY_ENABLED', 'false').lower() == 'true':
                    summary_engine.enable()
                    logger.info("‚úÖ SummaryEngine initialized and ENABLED")
                else:
                    logger.info("‚úÖ SummaryEngine initialized but DISABLED (set TLDRBUDDY_ENABLED=true to enable)")
            except Exception as se_error:
                logger.error(f"SummaryEngine initialization failed: {se_error}")
                summary_engine = None
        else:
            summary_engine = None
            logger.error("SummaryEngine disabled (no OpenAI client)")
        
        # Summarize startup status
        logger.info("=== STARTUP COMPLETED SUCCESSFULLY ===")
        logger.info(f"üé§ Speech Pipeline: {'‚úÖ Ready' if speech_pipeline else '‚ùå Failed'}")
        logger.info(f"üìù Text Processor: {'‚úÖ Ready' if text_processor else '‚ùå Failed'}")
        logger.info(f"üîó Redis Client: {'‚úÖ Connected' if redis_client else '‚ùå Fallback mode'}")
        logger.info(f"ü§ñ Archetype System: {'‚úÖ Ready' if archetype_system else '‚ùå Disabled'}")
        logger.info(f"üéõÔ∏è Button UI Manager: {'‚úÖ Full features' if button_ui_manager else '‚úÖ Fallback mode'}")
        logger.info(f"üìä SummaryEngine: {'‚úÖ Enabled' if summary_engine and summary_engine.enabled else '‚úÖ Disabled' if summary_engine else '‚ùå Failed'}")
        logger.info("===========================================")
        
    except Exception as e:
        logger.error(f"‚úó Failed to initialize: {e}")
        logger.exception("Full error details:")
        logger.error("Bot will start but speech processing will be unavailable")


async def on_startup():
    """Startup actions"""
    await startup()
    # Set webhook if WEBHOOK_URL is provided
    webhook_url = os.getenv('WEBHOOK_URL')
    if webhook_url:
        await bot.set_webhook(webhook_url)
        logger.info(f"Webhook set to {webhook_url}")


async def main():
    """Main bot function"""
    logger.info("Starting Telegram Voice-to-Insight Pipeline Bot...")
    
    # Check if we should use webhook or polling
    webhook_url = os.getenv('WEBHOOK_URL')
    
    # Railway port detection - try multiple sources
    port = 3000  # Default fallback
    port_env = os.getenv('PORT')
    if port_env:
        port = int(port_env)
        logger.info(f"Using PORT from environment: {port}")
    elif os.getenv('RAILWAY_ENVIRONMENT'):
        # Railway sometimes doesn't set PORT, use common Railway ports
        port = 8080  # Railway's common internal port
        logger.info(f"Railway environment detected, using port: {port}")
    else:
        logger.info(f"Using default port: {port}")
    
    logger.info(f"Configuration:")
    logger.info(f"- Mode: {'Webhook' if webhook_url else 'Polling'}")
    logger.info(f"- Port: {port}")
    logger.info(f"- Webhook URL: {webhook_url}")
    
    if webhook_url:
        # Webhook mode for Railway
        logger.info(f"üöÄ Starting in webhook mode on port {port}")
        
        try:
            # Initialize speech processing
            await startup()
            
            # Create aiohttp app
            app = web.Application()
            
            # Add health check route FIRST
            app.router.add_get('/health', health_check)
            logger.info("‚úì Health check route added")
            
            # Add root route for basic check
            async def root_handler(request):
                return web.Response(text="Telegram Bot is running", status=200)
            app.router.add_get('/', root_handler)
            logger.info("‚úì Root route added")
            
            # Setup webhook
            webhook_path = '/webhook'
            app.router.add_post(webhook_path, SimpleRequestHandler(dispatcher=dp, bot=bot).handle)
            logger.info("‚úì Webhook route added")
            
            # Start server BEFORE setting webhook
            runner = web.AppRunner(app)
            await runner.setup()
            site = web.TCPSite(runner, '0.0.0.0', port)
            await site.start()
            
            logger.info(f"‚úÖ Server started successfully on 0.0.0.0:{port}")
            
            # Set webhook AFTER server is running
            full_webhook_url = f"{webhook_url}{webhook_path}"
            await bot.set_webhook(full_webhook_url)
            logger.info(f"‚úÖ Webhook set to {full_webhook_url}")
            
            # Keep the server running
            logger.info("üîÑ Server is running and ready to receive requests...")
            try:
                while True:
                    await asyncio.sleep(60)  # Check every minute
                    logger.info("üíì Server heartbeat")
            except KeyboardInterrupt:
                logger.info("üõë Shutdown requested")
            finally:
                logger.info("üßπ Cleaning up...")
                await bot.delete_webhook()
                await runner.cleanup()
                
        except Exception as e:
            logger.error(f"üí• Failed to start webhook server: {e}")
            logger.exception("Full error:")
            raise
            
    else:
        # Polling mode for local development
        logger.info("üîÑ Starting in polling mode")
        
        # Initialize speech processing
        await startup()
        
        # Start polling
        await dp.start_polling(bot)


if __name__ == "__main__":
    # Skip single instance enforcement in production (Railway)
    is_production = os.getenv('RAILWAY_ENVIRONMENT') or os.getenv('WEBHOOK_URL')
    
    if not is_production:
        # Enforce single instance only in local development
        try:
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è single-instance enforcement...")
            process_manager = enforce_single_instance(auto_cleanup=True, force_cleanup=False)
            logger.info("‚úÖ Single-instance enforcement –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ process manager: {e}")
            process_manager = None
    else:
        logger.info("Production environment detected, skipping single-instance enforcement")
        process_manager = None
    
    try:
        # Start the bot
        asyncio.run(main())
        
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        sys.exit(1)
    finally:
        # Ensure process manager cleanup
        if process_manager:
            try:
                process_manager.release_lock()
                logger.info("‚úÖ Process manager –æ—á–∏—â–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ process manager: {e}") 

# Force Railway redeploy - 2025-07-30 21:42 